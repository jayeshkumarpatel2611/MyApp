name: Deploy POH Service

on: 
   workflow_dispatch:
      inputs:
         RingInfo:
            description: "RingInfo"
            required: true

jobs:
  
  createGithubWorkFlow:
    runs-on: windows-latest
    steps:
      - name: checkout action files
        uses: actions/checkout@v2 
      - name : Create Github WorkFlow for POH Service Deployment     
        shell: powershell
        run: |
             .\Scripts\createGithubWorflow.ps1 -Token '${{ secrets.MYAPPTOKEN }}' -RingInfo '${{ inputs.RingInfo }}'


  Job1:
    runs-on: ubuntu-latest
    needs: createGithubWorkFlow
    steps:
      - name: checkout action files
        uses: actions/checkout@v2 
      - name : Update POH Service Deployment Status on Azure SQL Database     
        shell: pwsh
        run: |
              Write-Host "Job1 Completed"

              

  Job2:
    runs-on: ubuntu-latest
    needs: [createGithubWorkFlow, Job1] 
    if: ${{ always() }}
    steps:
      - name: checkout action files
        uses: actions/checkout@v2 
      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
        
      - name : Update POH Service Deployment Status on Azure SQL Database 
        shell: pwsh
        run: |
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              Install-Module -Name SqlServer -Scope CurrentUser -AllowClobber -Force -ErrorAction Stop -Confirm:$false 
              $Date = Get-Date 
              $DeploymentStatus = "${{ needs.Job1.result }}"
              $DeploymentURL = "https://github.com/jayeshkumarpatel2611/MyApp/actions/runs/${{ github.run_id }}"
              Write-Host "Date: " $Date
              Write-Host "Status: " $DeploymentStatus
              Write-Host "URL: " $DeploymentURL
           
              Write-Host "---------------------------------------------------------------------------------------"
              $sqlQuery = "UPDATE [dbo].[POH] SET ServiceDeploymentDate = '$Date', ServiceDeploymentStatus = '$DeploymentStatus', ServiceDeploymentURL = '$DeploymentURL' WHERE TenantID = '8b9b2def-34a2-4e71-93cc-cf6bc40db219'"
              Invoke-sqlCmd -ConnectionString "${{ secrets.SQL_Connection_String }}" -query "$($sqlQuery)"
              
  
